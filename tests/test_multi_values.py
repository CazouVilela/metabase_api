#!/usr/bin/env python3
"""
Script para testar filtros com m√∫ltiplos valores
Execute com: python test_multi_values.py
"""

import requests
import urllib.parse
import json

def test_multiple_values():
    print("üß™ TESTE DE FILTROS COM M√öLTIPLOS VALORES\n")
    
    base_url = "http://localhost:3500"
    
    # 1. Teste do endpoint de debug
    print("1Ô∏è‚É£ Testando endpoint de debug com m√∫ltiplos valores...")
    print("-" * 50)
    
    # URL com m√∫ltiplos valores para campanha
    debug_url = f"{base_url}/debug/decode?campanha=Valor1&campanha=Valor2&campanha=Valor3&conta=ContaUnica"
    
    try:
        resp = requests.get(debug_url)
        if resp.status_code == 200:
            data = resp.json()
            print("Par√¢metros parseados:")
            print(json.dumps(data, indent=2, ensure_ascii=False))
            
            if data.get('multi_value_parameters'):
                print(f"\n‚úÖ M√∫ltiplos valores detectados para: {', '.join(data['multi_value_parameters'])}")
            else:
                print("\n‚ùå Nenhum par√¢metro com m√∫ltiplos valores detectado!")
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")
    
    # 2. Teste com valores reais do Metabase
    print("\n\n2Ô∏è‚É£ Testando com valores reais do Metabase...")
    print("-" * 50)
    
    # Valores exatos do problema
    campanhas = [
        "Barra Shopping | Road | Tr√°fego | Always On | MultiVoc√™ | 07.02",
        "Barra Shopping | ROAD | Tr√°fego | Always On | Institucional / Acesso Multi | 24.10",
        "Barra Shopping | Road | Reconhecimento | Always On | MultiVoc√™ | 07.02"
    ]
    conta = "ASSOCIACAO DOS LOJISTAS DO SHOPPING CENTER DA BARRA"
    
    # Constr√≥i URL com m√∫ltiplos valores
    params = [('question_id', '51'), ('conta', conta)]
    for campanha in campanhas:
        params.append(('campanha', campanha))
    
    # URL com encoding correto
    query_string = urllib.parse.urlencode(params)
    query_url = f"{base_url}/query?{query_string}"
    
    print("URL constru√≠da (truncada):")
    print(f"{query_url[:150]}...")
    print(f"\nN√∫mero de valores de campanha: {len(campanhas)}")
    
    try:
        resp = requests.get(query_url, timeout=30)
        if resp.status_code == 200:
            data = resp.json()
            if isinstance(data, list):
                print(f"\n‚úÖ Resultado: {len(data)} linhas")
                print(f"   Esperado: ~4878 linhas (como no dashboard)")
                
                if len(data) < 4000:
                    print("\n‚ö†Ô∏è  Menos linhas que o esperado!")
                    print("   Poss√≠vel problema: O servidor pode n√£o estar processando m√∫ltiplos valores corretamente")
            else:
                print(f"\n‚ùå Resposta inesperada: {type(data)}")
    except Exception as e:
        print(f"\n‚ùå Erro na requisi√ß√£o: {str(e)}")
    
    # 3. Teste do endpoint /test
    print("\n\n3Ô∏è‚É£ Testando endpoint /test com m√∫ltiplos valores...")
    print("-" * 50)
    
    try:
        resp = requests.get(f"{base_url}/test")
        if resp.status_code == 200:
            data = resp.json()
            print(f"Resultado do teste:")
            print(f"  Linhas retornadas: {data.get('rows_returned', 0)}")
            print(f"  Filtros: {json.dumps(data.get('filters', {}), indent=4)}")
            
            if data.get('rows_returned', 0) > 4000:
                print("\n‚úÖ Teste com m√∫ltiplos valores funcionando!")
            else:
                print("\n‚ö†Ô∏è  Teste retornou menos linhas que o esperado")
    except Exception as e:
        print(f"\n‚ùå Erro: {str(e)}")
    
    # 4. Compara√ß√£o: valor √∫nico vs m√∫ltiplos valores
    print("\n\n4Ô∏è‚É£ Compara√ß√£o: filtro √∫nico vs m√∫ltiplos valores...")
    print("-" * 50)
    
    # Teste com apenas uma campanha
    single_url = f"{base_url}/query?question_id=51&conta={urllib.parse.quote(conta)}&campanha={urllib.parse.quote(campanhas[0])}"
    
    try:
        resp_single = requests.get(single_url)
        if resp_single.status_code == 200:
            data_single = resp_single.json()
            rows_single = len(data_single) if isinstance(data_single, list) else 0
            print(f"Com 1 campanha: {rows_single} linhas")
        
        # Teste com todas as campanhas
        resp_multi = requests.get(query_url)
        if resp_multi.status_code == 200:
            data_multi = resp_multi.json()
            rows_multi = len(data_multi) if isinstance(data_multi, list) else 0
            print(f"Com 3 campanhas: {rows_multi} linhas")
            
            if rows_multi > rows_single:
                print(f"\n‚úÖ M√∫ltiplos valores est√£o funcionando! ({rows_multi} > {rows_single})")
            else:
                print(f"\n‚ùå Problema detectado! M√∫ltiplos valores n√£o aumentaram o resultado")
    except Exception as e:
        print(f"\n‚ùå Erro na compara√ß√£o: {str(e)}")


if __name__ == "__main__":
    print("‚ö†Ô∏è  Certifique-se de que o proxy_server est√° rodando na porta 3500\n")
    test_multiple_values()
